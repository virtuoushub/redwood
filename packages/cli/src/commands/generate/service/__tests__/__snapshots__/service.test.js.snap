// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`in javascript mode creates a multi word service file 1`] = `
"import { db } from 'src/lib/db'

export const userProfiles = () => {
  return db.userProfile.findMany()
}
"
`;

exports[`in javascript mode creates a multi word service test file 1`] = `
"import { userProfiles } from './userProfiles'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('userProfiles', () => {
  scenario('returns all userProfiles', async (scenario) => {
    const result = await userProfiles()

    expect(result.length).toEqual(Object.keys(scenario.userProfile).length)
  })
})
"
`;

exports[`in javascript mode creates a multi word service test file with crud actions and only foreign as mandatory field 1`] = `
"import {
  transactions,
  transaction,
  createTransaction,
  updateTransaction,
  deleteTransaction,
} from './transactions'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('transactions', () => {
  scenario('returns all transactions', async (scenario) => {
    const result = await transactions()

    expect(result.length).toEqual(Object.keys(scenario.transaction).length)
  })

  scenario('returns a single transaction', async (scenario) => {
    const result = await transaction({ id: scenario.transaction.one.id })

    expect(result).toEqual(scenario.transaction.one)
  })

  scenario('creates a transaction', async (scenario) => {
    const result = await createTransaction({
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('updates a transaction', async (scenario) => {
    const original = await transaction({ id: scenario.transaction.one.id })
    const result = await updateTransaction({
      id: original.id,
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('deletes a transaction', async (scenario) => {
    const original = await deleteTransaction({
      id: scenario.transaction.one.id,
    })

    const result = await transaction({ id: original.id })

    expect(result).toEqual(null)
  })
})
"
`;

exports[`in javascript mode creates a single word service file 1`] = `
"import { db } from 'src/lib/db'

export const users = () => {
  return db.user.findMany()
}

export const user = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const createUser = ({ input }) => {
  return db.user.create({
    data: input,
  })
}

export const updateUser = ({ id, input }) => {
  return db.user.update({
    data: input,
    where: { id },
  })
}

export const deleteUser = ({ id }) => {
  return db.user.delete({
    where: { id },
  })
}
"
`;

exports[`in javascript mode creates a single word service file with CRUD actions 1`] = `
"import { db } from 'src/lib/db'

export const posts = () => {
  return db.post.findMany()
}

export const post = ({ id }) => {
  return db.post.findUnique({
    where: { id },
  })
}

export const createPost = ({ input }) => {
  return db.post.create({
    data: input,
  })
}

export const updatePost = ({ id, input }) => {
  return db.post.update({
    data: input,
    where: { id },
  })
}

export const deletePost = ({ id }) => {
  return db.post.delete({
    where: { id },
  })
}
"
`;

exports[`in javascript mode creates a single word service file with a belongsTo relation 1`] = `
"import { db } from 'src/lib/db'

export const users = () => {
  return db.user.findMany()
}

export const user = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const User = {
  identity: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in javascript mode creates a single word service file with a hasMany relation 1`] = `
"import { db } from 'src/lib/db'

export const users = () => {
  return db.user.findMany()
}

export const user = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const User = {
  userProfiles: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
}
"
`;

exports[`in javascript mode creates a single word service file with multiple relations 1`] = `
"import { db } from 'src/lib/db'

export const users = () => {
  return db.user.findMany()
}

export const user = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const User = {
  userProfiles: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
  identity: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in javascript mode creates a single word service scenario file 1`] = `
"export const standard = defineScenario({
  user: {
    one: { data: { email: 'String1234567' } },
    two: { data: { email: 'String1234567' } },
  },
})
"
`;

exports[`in javascript mode creates a single word service test file 1`] = `
"import { users, user, createUser, updateUser, deleteUser } from './users'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('users', () => {
  scenario('returns all users', async (scenario) => {
    const result = await users()

    expect(result.length).toEqual(Object.keys(scenario.user).length)
  })

  scenario('returns a single user', async (scenario) => {
    const result = await user({ id: scenario.user.one.id })

    expect(result).toEqual(scenario.user.one)
  })

  scenario('creates a user', async () => {
    const result = await createUser({
      input: { email: 'String1234567' },
    })

    expect(result.email).toEqual('String1234567')
  })

  scenario('updates a user', async (scenario) => {
    const original = await user({ id: scenario.user.one.id })
    const result = await updateUser({
      id: original.id,
      input: { email: 'String12345672' },
    })

    expect(result.email).toEqual('String12345672')
  })

  scenario('deletes a user', async (scenario) => {
    const original = await deleteUser({ id: scenario.user.one.id })
    const result = await user({ id: original.id })

    expect(result).toEqual(null)
  })
})
"
`;

exports[`in typescript mode creates a multi word service file 1`] = `
"import type { QueryResolvers } from 'types/graphql'

import { db } from 'src/lib/db'

export const userProfiles: QueryResolvers['userProfiles'] = () => {
  return db.userProfile.findMany()
}
"
`;

exports[`in typescript mode creates a multi word service test file 1`] = `
"import { userProfiles } from './userProfiles'
import type { StandardScenario } from './userProfiles.scenarios'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('userProfiles', () => {
  scenario('returns all userProfiles', async (scenario: StandardScenario) => {
    const result = await userProfiles()

    expect(result.length).toEqual(Object.keys(scenario.userProfile).length)
  })
})
"
`;

exports[`in typescript mode creates a multi word service test file with crud actions and only foreign as mandatory field 1`] = `
"import {
  transactions,
  transaction,
  createTransaction,
  updateTransaction,
  deleteTransaction,
} from './transactions'
import type { StandardScenario } from './transactions.scenarios'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('transactions', () => {
  scenario('returns all transactions', async (scenario: StandardScenario) => {
    const result = await transactions()

    expect(result.length).toEqual(Object.keys(scenario.transaction).length)
  })

  scenario(
    'returns a single transaction',
    async (scenario: StandardScenario) => {
      const result = await transaction({ id: scenario.transaction.one.id })

      expect(result).toEqual(scenario.transaction.one)
    }
  )

  scenario('creates a transaction', async (scenario: StandardScenario) => {
    const result = await createTransaction({
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('updates a transaction', async (scenario: StandardScenario) => {
    const original = await transaction({ id: scenario.transaction.one.id })
    const result = await updateTransaction({
      id: original.id,
      input: { userId: scenario.transaction.two.userId },
    })

    expect(result.userId).toEqual(scenario.transaction.two.userId)
  })

  scenario('deletes a transaction', async (scenario: StandardScenario) => {
    const original = await deleteTransaction({
      id: scenario.transaction.one.id,
    })
    const result = await transaction({ id: original.id })

    expect(result).toEqual(null)
  })
})
"
`;

exports[`in typescript mode creates a single word service file 1`] = `
"import type { QueryResolvers, MutationResolvers } from 'types/graphql'

import { db } from 'src/lib/db'

export const users: QueryResolvers['users'] = () => {
  return db.user.findMany()
}

export const user: QueryResolvers['user'] = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const createUser: MutationResolvers['createUser'] = ({ input }) => {
  return db.user.create({
    data: input,
  })
}

export const updateUser: MutationResolvers['updateUser'] = ({ id, input }) => {
  return db.user.update({
    data: input,
    where: { id },
  })
}

export const deleteUser: MutationResolvers['deleteUser'] = ({ id }) => {
  return db.user.delete({
    where: { id },
  })
}
"
`;

exports[`in typescript mode creates a single word service file with CRUD actions 1`] = `
"import type { QueryResolvers, MutationResolvers } from 'types/graphql'

import { db } from 'src/lib/db'

export const posts: QueryResolvers['posts'] = () => {
  return db.post.findMany()
}

export const post: QueryResolvers['post'] = ({ id }) => {
  return db.post.findUnique({
    where: { id },
  })
}

export const createPost: MutationResolvers['createPost'] = ({ input }) => {
  return db.post.create({
    data: input,
  })
}

export const updatePost: MutationResolvers['updatePost'] = ({ id, input }) => {
  return db.post.update({
    data: input,
    where: { id },
  })
}

export const deletePost: MutationResolvers['deletePost'] = ({ id }) => {
  return db.post.delete({
    where: { id },
  })
}
"
`;

exports[`in typescript mode creates a single word service file with a belongsTo relation 1`] = `
"import type { QueryResolvers, UserResolvers } from 'types/graphql'

import { db } from 'src/lib/db'

export const users: QueryResolvers['users'] = () => {
  return db.user.findMany()
}

export const user: QueryResolvers['user'] = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const User: UserResolvers = {
  identity: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in typescript mode creates a single word service file with a hasMany relation 1`] = `
"import type { QueryResolvers, UserResolvers } from 'types/graphql'

import { db } from 'src/lib/db'

export const users: QueryResolvers['users'] = () => {
  return db.user.findMany()
}

export const user: QueryResolvers['user'] = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const User: UserResolvers = {
  userProfiles: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
}
"
`;

exports[`in typescript mode creates a single word service file with multiple relations 1`] = `
"import type { QueryResolvers, UserResolvers } from 'types/graphql'

import { db } from 'src/lib/db'

export const users: QueryResolvers['users'] = () => {
  return db.user.findMany()
}

export const user: QueryResolvers['user'] = ({ id }) => {
  return db.user.findUnique({
    where: { id },
  })
}

export const User: UserResolvers = {
  userProfiles: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).userProfiles(),
  identity: (_obj, { root }) =>
    db.user.findUnique({ where: { id: root.id } }).identity(),
}
"
`;

exports[`in typescript mode creates a single word service scenario file 1`] = `
"import type { Prisma } from '@prisma/client'

export const standard = defineScenario<Prisma.UserCreateArgs>({
  user: {
    one: { data: { email: 'String1234567' } },
    two: { data: { email: 'String1234567' } },
  },
})

export type StandardScenario = typeof standard
"
`;

exports[`in typescript mode creates a single word service test file 1`] = `
"import { users, user, createUser, updateUser, deleteUser } from './users'
import type { StandardScenario } from './users.scenarios'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('users', () => {
  scenario('returns all users', async (scenario: StandardScenario) => {
    const result = await users()

    expect(result.length).toEqual(Object.keys(scenario.user).length)
  })

  scenario('returns a single user', async (scenario: StandardScenario) => {
    const result = await user({ id: scenario.user.one.id })

    expect(result).toEqual(scenario.user.one)
  })

  scenario('creates a user', async () => {
    const result = await createUser({
      input: { email: 'String1234567' },
    })

    expect(result.email).toEqual('String1234567')
  })

  scenario('updates a user', async (scenario: StandardScenario) => {
    const original = await user({ id: scenario.user.one.id })
    const result = await updateUser({
      id: original.id,
      input: { email: 'String12345672' },
    })

    expect(result.email).toEqual('String12345672')
  })

  scenario('deletes a user', async (scenario: StandardScenario) => {
    const original = await deleteUser({ id: scenario.user.one.id })
    const result = await user({ id: original.id })

    expect(result).toEqual(null)
  })
})
"
`;
